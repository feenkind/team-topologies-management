// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @db.VarChar(255)
  description String
  Domain      Domain[]
  Team        Team[]
}

model Domain {
  id                    String                  @id @default(cuid())
  project               Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId             String                  @db.Text
  name                  String                  @db.VarChar(255)
  description           String
  priority              Priority
  complexity            Complexity
  domainHistory         DomainHistory[]
  domainsOnTeams        DomainsOnTeams[]
  domainsOnTeamsHistory DomainsOnTeamsHistory[]
}

model DomainHistory {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  domain      Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId    String     @db.Text
  changeNote  String
  name        String     @db.VarChar(255)
  description String
  priority    Priority
  complexity  Complexity
}

model Team {
  id                        String                  @id @default(cuid())
  project                   Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                 String                  @db.Text
  teamHistory               TeamHistory[]
  name                      String
  cognitiveLoad             Int                     @db.SmallInt
  fte                       Int                     @db.SmallInt
  focus                     String
  type                      TeamType
  platform                  String?
  wikiSearchTerms           String[]
  communicationChannel      CommunicationChannel[]
  meeting                   Meeting[]
  service                   Service[]
  wayOfWorking              WayOfWorking[]
  domainsOnTeams            DomainsOnTeams[]
  domainsOnTeamsHistory     DomainsOnTeamsHistory[]
  work                      Work[]
  dependency                Dependency[]            @relation("teamFrom")
  dependingTeam             Dependency[]            @relation("teamTo")
  dependencyHistory         DependencyHistory[]     @relation("historyTeamFrom")
  dependingHistory          DependencyHistory[]     @relation("historyTeamTo")
  interactionTeamTwo        Interaction[]           @relation("teamOne")
  interactionTeamOne        Interaction[]           @relation("teamTwo")
  interactionHistoryTeamTwo InteractionHistory[]    @relation("historyTeamOne")
  interactionHistoryTeamOne InteractionHistory[]    @relation("historyTeamTwo")
}

model TeamHistory {
  id            String   @id @default(cuid())
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String   @db.Text
  createdAt     DateTime @default(now())
  changeNote    String
  cognitiveLoad Int      @db.SmallInt
  fte           Int      @db.SmallInt
  type          TeamType
}

model DomainsOnTeams {
  domain   Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId String @db.Text
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String @db.Text

  @@id([domainId, teamId])
}

model DomainsOnTeamsHistory {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  changeNote String
  domain     Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId   String   @db.Text
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String   @db.Text
}

model CommunicationChannel {
  id     String      @id @default(cuid())
  team   Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String      @db.Text
  type   ChannelType
  name   String
}

model Meeting {
  id              String     @id @default(cuid())
  team            Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String     @db.Text
  day             MeetingDay
  purpose         String
  time            String     @db.VarChar(255)
  durationMinutes Int        @db.SmallInt
}

model Service {
  id         String         @id @default(cuid())
  team       Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String         @db.Text
  versioning VersioningType
  name       String         @db.VarChar(255)
  url        String?
  repository String?
}

model WayOfWorking {
  id     String  @id @default(cuid())
  team   Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String  @db.Text
  name   String  @db.VarChar(255)
  url    String?
}

model Work {
  id         String  @id @default(cuid())
  team       Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String  @db.Text
  summary    String
  repository String?
}

model Dependency {
  teamFrom       Team           @relation("teamFrom", fields: [teamIdFrom], references: [id], onDelete: Cascade)
  teamIdFrom     String         @db.Text
  teamTo         Team           @relation("teamTo", fields: [teamIdTo], references: [id], onDelete: Cascade)
  teamIdTo       String         @db.Text
  dependencyType DependencyType
  description    String?

  @@id([teamIdFrom, teamIdTo])
}

model DependencyHistory {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  changeNote     String
  changeType     ChangeType
  teamFrom       Team           @relation("historyTeamFrom", fields: [teamIdFrom], references: [id], onDelete: Cascade)
  teamIdFrom     String         @db.Text
  teamTo         Team           @relation("historyTeamTo", fields: [teamIdTo], references: [id], onDelete: Cascade)
  teamIdTo       String         @db.Text
  dependencyType DependencyType
  description    String?
}

model Interaction {
  teamOne               Team            @relation("teamOne", fields: [teamIdOne], references: [id], onDelete: Cascade)
  teamIdOne             String          @db.Text
  teamTwo               Team            @relation("teamTwo", fields: [teamIdTwo], references: [id], onDelete: Cascade)
  teamIdTwo             String          @db.Text
  interactionMode       InteractionMode
  purpose               String
  startDate             DateTime
  expectedDuration      Int             @db.SmallInt
  additionalInformation String?

  @@id([teamIdOne, teamIdTwo])
}

model InteractionHistory {
  id                    String          @id @default(cuid())
  createdAt             DateTime        @default(now())
  changeNote            String
  changeType            ChangeType
  teamOne               Team            @relation("historyTeamOne", fields: [teamIdOne], references: [id], onDelete: Cascade)
  teamIdOne             String          @db.Text
  teamTwo               Team            @relation("historyTeamTwo", fields: [teamIdTwo], references: [id], onDelete: Cascade)
  teamIdTwo             String          @db.Text
  interactionMode       InteractionMode
  purpose               String
  startDate             DateTime
  expectedDuration      Int             @db.SmallInt
  additionalInformation String?
}

enum Priority {
  generic
  supporting
  core
}

enum Complexity {
  simple
  complicated
  complex
}

enum TeamType {
  stream_aligned
  platform
  enabling
  complicated_subsystem
  undefined
}

enum ChannelType {
  slack
}

enum MeetingDay {
  daily
  monday
  tuesday
  wednesday
  thursday
  friday
}

enum VersioningType {
  semantic
  sequential
}

enum DependencyType {
  ok
  slowing
  blocking
}

enum InteractionMode {
  collaboration
  x_as_a_service
  facilitating
  undefined
}

enum ChangeType {
  added
  removed
  changed
}
